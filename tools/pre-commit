#!/bin/bash
#
# pre-commit hook script that activates the Sesame serializer to serialize any OWL files in a standard format just before
# they are committed to the (local) Github repository.
#
# Called by "git commit" with no arguments. This hook will stop the commit when it encounters an error.
#
# To enable this hook, save this file to the directory <your git clone root>/.git/hooks
#

# Customized by the git user
#export JAVA_HOME="/c/Program Files (x86)/Java/jre1.17.0_201"

#
# Redirect all output generated by this script to stderr.
#
exec 1>&2

log_prefix="rdf-toolkit: sesame-serializer: "

function log() {
  echo "${log_prefix}$@"
}

function log_error() {
  log "ERROR: $@"
}

log "This is the pre-commit hook."

java_exe=""
base_dir=""

function findJava() {

  min_java=11

  whichJava=""

  java_home=""

  if [ "${RDF_TOOLKIT_JAVA_HOME}" != "" ] ; then
    java_home="${RDF_TOOLKIT_JAVA_HOME}"
  fi
  if [ "${JAVA_HOME}" != "" ] ; then
    java_home="${JAVA_HOME}"
  fi
  if [ "${java_home}" == "" ] ; then
    log_error A-$JAVA_HOME
    log_error "Please set RDF_TOOLKIT_JAVA_HOME or JAVA_HOME to point to a Java ${min_java} or later installation."
    return 1
  fi
  java_home=${java_home/C:\\/\/c\/}
  java_home=${java_home//\\/\/}
  log "java_home =" ${java_home}

  if [ -x "${java_home}/bin/java" ] ; then
    whichJava="${java_home}/bin/java"
  else
    log_error "Could not find java in your RDF_TOOLKIT_JAVA_HOME or JAVA_HOME: ${java_home}."
    log_error "Please set RDF_TOOLKIT_JAVA_HOME or JAVA_HOME to point to a Java ${min_java} or later installation."
    return 1
  fi
  log "whichJava =" $whichJava

  local versionJava=$( "$whichJava" -version 2>&1 | head -n 1 | cut -d \"  -f 2 )
  log "versionJava = " $versionJava

  set -- ${versionJava//./ }

  local java_major=$1
  local java_minor=$2

  if [ $java_major -ge $min_java ] ; then
  	:
  else
    log_error "You are using Java $java_major.$java_minor whereas the Sesame serializer requires Java ${min_java} or higher."
    return 2
  fi

  java_exe="${whichJava}"

  return 0
}

function findSerializerJar() {

  # DO NOT MODIFY! Only the version of rdf-toolkit.jar found in ${PWD}/tools/ should be used. Mixing versions may create bogus diffs.
  RDF_TOOLKIT_JAR="$PWD/tools/rdf-toolkit.jar"

  if [ -f "${RDF_TOOLKIT_JAR}" ] ; then
  	log "Found rdf-toolkit: ${RDF_TOOLKIT_JAR}"
  	return 0
  fi

  log_error "Could not find rdf-toolkit.jar in ${PWD}/tools/rdf-toolkit.jar. Please retrieve the file from the git repository. ONLY this version of the file should be used in order to prevent bogus diffs caused by mixing versions."

  return 1
}

# function findBaseDir() {

#   #
#   # For now, we just take the top level directory of the current git repository as the base dir
#   #
#   base_dir=$(git rev-parse --show-toplevel)

#   if [ "${base_dir}" == "" ] ; then
#     log_error "Could not find base directory"
#     return 1
#   fi
#   if [ ! -d "${base_dir}" ] ; then
#     log_error "Could not find base directory"
#     return 1
#   fi

#   return 0
# }

function showFilesThatAreInCommit() {

  git diff --cached --name-only
}

function serialize() {

  local file="$1"
  if [ -f "$file" ] ; then
    local extension="${file##*.}"
    log "File extension is $extension"
    if [ -d "$TEMP" ] ; then
      local logcfg="$TEMP/sesame-serializer-log"
    else
      if [ -d "/tmp/" ] ; then
        local logcfg="/tmp/sesame-serializer-log"
      fi
    fi

    local tfmt=turtle
    case ${extension} in
    	ttl)
     	  ;;
    	owl)
          tfmt=rdf-xml
     	  ;;
      *)
        log "Skipping unsupported file $file"
        return 0
    esac

    log "Target format is $tfmt"
    
    if [[ $file =~ .*About.* ]] ;  then 
        log "Skipping unsupported file $file"
        return 0
    fi

    if [[ $file =~ .*OWL.* ]] ;  then 
        log "Skipping unsupported file $file"
        return 0
    fi


    if [ -x "$logcfg" ] ; then
      cat > ${logcfg} << __log_config__
[logger_root]
level: error
handlers: h1

[handler_h1]
level: error
class: ConsoleHandler
formatter: f1

[formatter_f1]
class: DefaultFormatter
format: (%l) %t
__log_config__
    fi

    log "Launching the sesame-serializer with --source ${file}"

    set -x
    "${java_exe}" -Xmx1g "-Dorg.clapper.avsl.config=${logcfg}" -jar "${RDF_TOOLKIT_JAR}" \
      --source "${file}" \
      --target "${file}X" \
      --target-format ${tfmt} \
      --use-dtd-subset \
      --string-data-typing explicit \
      --inline-blank-nodes
    rc=$?
    set +x

    if [ -x "$logcfg" ] ; then
      rm -f "${logcfg}" >/dev/null 2>&1
    fi

#    sed '/rdfs:label/!b;:a;/datatype="&xsd;string"/bb;$!{N;ba};:b;s/rdfs:label[^>]*datatype=".....string"/rdfs:label/' "${file}" > temp
#    rm "${file}"
#    mv temp "${file}"


    if [ ${rc} -eq 0 ] ; then
      log "Re-adding potentially re-serialized file to git staging area: ${file}"
      rm  "${file}"
      mv  "${file}X" "${file}"
      git add --update "${file}"
    else
      log_error "sesame-serializer ended with error code ${rc}"
    fi
    return ${rc}
  else
    return 0
  fi

}

function serialize_all() {

  #echo "Checking the following files:"
  #showFilesThatAreInCommit

  for fileToBeCommitted in $(git diff --cached --name-only) ; do
    if ! serialize "$fileToBeCommitted" ; then
      return 1
    fi
  done

  return 0
}

function remove_skos_decls () {
  for fileToBeCommitted in $(git diff --cached --name-only) ; do
    sed -e '/^skos/,+3d' "$fileToBeCommitted" > tmp$$
    mv tmp$$ "$fileToBeCommitted"
  done

  return 0
}

function main() {

	findJava || return 1
	findSerializerJar || return 2
#	findBaseDir || return 3
  serialize_all
  remove_skos_decls
}

main $*
rc=$?
if [ $rc -gt 0 ] ; then
  log_error "Could not commit your files"
fi
exit $rc
