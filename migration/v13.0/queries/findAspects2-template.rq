# find existing Aspects that are represented as either:
#
#   - a property of a Thing with a Magnitude or
#   - the value of the property
#
# use this query iteratively as follows:
#
#   - run the query
#   - pick a few lines of output
#   - update the upper section of the query with concepts that do NOT involve an Aspect
#   - update the lower section of the query (filter not exists) with properties and values that DO represent Aspects
#   - repeat
#
# this iterative process accounts for every property and value associated with a Magnitude
# when the query returns no results, every row of the original output has been accounted for



select distinct  ?thingProperty ?thingPropertyValue

where {
  
   ?magnitude gist:hasUnitOfMeasure ?unit .

   ?thing gist:hasMagnitude ?magnitude ;
          ?thingProperty ?thingPropertyValue ;
          .
                
   filter(?thingProperty not in (         # properties that do not represent and Aspect and never have a value that represents an Aspect
           gist:actualEndMicrosecond,
           gist:actualEndMinute,
           gist:actualStartAtDate,
           gist:actualStartMinute,
           gist:conformsTo,
           gist:containedText,
           gist:description,
           gist:hasDirectPart,
           gist:hasGoal,
           gist:hasMagnitude,
           gist:hasPart,
           gist:hasPhysicalLocation,
           gist:isAffectedBy,
           gist:isBasedOn,
           gist:isConnectedTo,
           gist:isRecognizedBy,
           gist:isRecordedAt,
           gist:name,
           gist:plannedEndDate,
           gist:plannedStartDate,
           gist:uniqueText,
           rdfs:comment,
           rdfs:isDefinedBy,
           skos:altLabel,
           skos:definition,
           skos:prefLabel,
           skos:scopeNote

           )) 
              
   filter(?thingPropertyValue not in (         # values that do not represent Aspects

          gist:Event,             # sample value
          owl:NamedIndividual,
          owl:Thing
          ))

  filter not exists {

     values (?thingProperty     ?thingPropertyValue) {    # property/value pairs with a property or value that represents an Aspect
                                                 

            }
  }
}
order by ?thingProperty ?thingPropertyValue
